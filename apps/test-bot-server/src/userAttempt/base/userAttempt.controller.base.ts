/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserAttemptService } from "../userAttempt.service";
import { UserAttemptCreateInput } from "./UserAttemptCreateInput";
import { UserAttempt } from "./UserAttempt";
import { UserAttemptFindManyArgs } from "./UserAttemptFindManyArgs";
import { UserAttemptWhereUniqueInput } from "./UserAttemptWhereUniqueInput";
import { UserAttemptUpdateInput } from "./UserAttemptUpdateInput";

export class UserAttemptControllerBase {
  constructor(protected readonly service: UserAttemptService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAttempt })
  async createUserAttempt(
    @common.Body() data: UserAttemptCreateInput
  ): Promise<UserAttempt> {
    return await this.service.createUserAttempt({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        timestamp: true,
        attempt: true,
        isCorrect: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAttempt] })
  @ApiNestedQuery(UserAttemptFindManyArgs)
  async userAttempts(@common.Req() request: Request): Promise<UserAttempt[]> {
    const args = plainToClass(UserAttemptFindManyArgs, request.query);
    return this.service.userAttempts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        timestamp: true,
        attempt: true,
        isCorrect: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAttempt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userAttempt(
    @common.Param() params: UserAttemptWhereUniqueInput
  ): Promise<UserAttempt | null> {
    const result = await this.service.userAttempt({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        timestamp: true,
        attempt: true,
        isCorrect: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAttempt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserAttempt(
    @common.Param() params: UserAttemptWhereUniqueInput,
    @common.Body() data: UserAttemptUpdateInput
  ): Promise<UserAttempt | null> {
    try {
      return await this.service.updateUserAttempt({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          timestamp: true,
          attempt: true,
          isCorrect: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAttempt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserAttempt(
    @common.Param() params: UserAttemptWhereUniqueInput
  ): Promise<UserAttempt | null> {
    try {
      return await this.service.deleteUserAttempt({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          timestamp: true,
          attempt: true,
          isCorrect: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
