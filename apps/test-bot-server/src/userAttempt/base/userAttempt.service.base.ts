/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserAttempt as PrismaUserAttempt } from "@prisma/client";

export class UserAttemptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserAttemptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAttempt.count(args);
  }

  async userAttempts(
    args: Prisma.UserAttemptFindManyArgs
  ): Promise<PrismaUserAttempt[]> {
    return this.prisma.userAttempt.findMany(args);
  }
  async userAttempt(
    args: Prisma.UserAttemptFindUniqueArgs
  ): Promise<PrismaUserAttempt | null> {
    return this.prisma.userAttempt.findUnique(args);
  }
  async createUserAttempt(
    args: Prisma.UserAttemptCreateArgs
  ): Promise<PrismaUserAttempt> {
    return this.prisma.userAttempt.create(args);
  }
  async updateUserAttempt(
    args: Prisma.UserAttemptUpdateArgs
  ): Promise<PrismaUserAttempt> {
    return this.prisma.userAttempt.update(args);
  }
  async deleteUserAttempt(
    args: Prisma.UserAttemptDeleteArgs
  ): Promise<PrismaUserAttempt> {
    return this.prisma.userAttempt.delete(args);
  }
}
