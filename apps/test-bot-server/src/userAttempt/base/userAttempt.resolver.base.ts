/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserAttempt } from "./UserAttempt";
import { UserAttemptCountArgs } from "./UserAttemptCountArgs";
import { UserAttemptFindManyArgs } from "./UserAttemptFindManyArgs";
import { UserAttemptFindUniqueArgs } from "./UserAttemptFindUniqueArgs";
import { CreateUserAttemptArgs } from "./CreateUserAttemptArgs";
import { UpdateUserAttemptArgs } from "./UpdateUserAttemptArgs";
import { DeleteUserAttemptArgs } from "./DeleteUserAttemptArgs";
import { UserAttemptService } from "../userAttempt.service";
@graphql.Resolver(() => UserAttempt)
export class UserAttemptResolverBase {
  constructor(protected readonly service: UserAttemptService) {}

  async _userAttemptsMeta(
    @graphql.Args() args: UserAttemptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserAttempt])
  async userAttempts(
    @graphql.Args() args: UserAttemptFindManyArgs
  ): Promise<UserAttempt[]> {
    return this.service.userAttempts(args);
  }

  @graphql.Query(() => UserAttempt, { nullable: true })
  async userAttempt(
    @graphql.Args() args: UserAttemptFindUniqueArgs
  ): Promise<UserAttempt | null> {
    const result = await this.service.userAttempt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserAttempt)
  async createUserAttempt(
    @graphql.Args() args: CreateUserAttemptArgs
  ): Promise<UserAttempt> {
    return await this.service.createUserAttempt({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserAttempt)
  async updateUserAttempt(
    @graphql.Args() args: UpdateUserAttemptArgs
  ): Promise<UserAttempt | null> {
    try {
      return await this.service.updateUserAttempt({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAttempt)
  async deleteUserAttempt(
    @graphql.Args() args: DeleteUserAttemptArgs
  ): Promise<UserAttempt | null> {
    try {
      return await this.service.deleteUserAttempt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
